\'use client\';\n\nimport React, { useEffect, useState } from \'react\';\nimport { useParams } from \'next/navigation\'; // Hook to get dynamic route parameters\nimport { useAppContext } from \'@/lib/context/AppContext\';\nimport { runPrediction } from \'@/lib/api-client\'; // Import API client function\n\n// Import Study Detail Components\nimport EndpointSelectionPanel from \'@/components/study-detail/EndpointSelectionPanel\';\nimport DoseResponseVisualization from \'@/components/study-detail/DoseResponseVisualization\';\nimport DataTable from \'@/components/study-detail/DataTable\';\nimport StudyDetailsPanel from \'@/components/study-detail/StudyDetailsPanel\';\n\nconst StudyDetailPage: React.FC = () => {\n  const params = useParams();\n  const studyId = params?.id as string; // Get study ID from URL, assert as string\n\n  const { state, dispatch } = useAppContext();\n  const { isLoading, error, currentPrediction, studies } = state;\n\n  // Local state for managing selected endpoints in this view\n  const [selectedEndpoints, setSelectedEndpoints] = useState<string[]>([]);\n\n  // Effect to trigger prediction if this study isn\'t the currently selected one\n  // or if prediction results are not available for it.\n  useEffect(() => {\n    if (studyId && (!currentPrediction || currentPrediction.study_id !== studyId)) {\n      dispatch({ type: \'SET_SELECTED_STUDY\', payload: studyId });\n      dispatch({ type: \'SET_LOADING\', payload: true });\n\n      runPrediction(studyId)\n        .then(prediction => {\n          dispatch({ type: \'SET_PREDICTION_RESULT\', payload: prediction });\n        })\n        .catch(err => {\n          console.error(\"Prediction error:\", err);\n          dispatch({ type: \'SET_ERROR\', payload: err.message || \'Failed to run prediction.\' });\n        });\n    }\ else if (studyId && !currentPrediction && state.selectedStudyId === studyId) {\n      // If studyId is selected but prediction is null (e.g. navigation back), retry prediction\n       dispatch({ type: \'SET_LOADING\', payload: true });\n       runPrediction(studyId)\n        .then(prediction => {\n          dispatch({ type: \'SET_PREDICTION_RESULT\', payload: prediction });\n        })\n        .catch(err => {\n          console.error(\"Prediction error:\", err);\n          dispatch({ type: \'SET_ERROR\', payload: err.message || \'Failed to run prediction.\' });\n        });\n    }\n  }, [studyId, currentPrediction, state.selectedStudyId, dispatch]); // Dependencies for the effect\n\n  // Extract relevant data (assuming prediction holds the necessary details)\n  // TODO: Refine data extraction based on actual API response and state structure\n  const studyDetails = currentPrediction?.prediction_details; // Or fetch separately\n  const findingsData = currentPrediction?.prediction_details; // Placeholder: need actual findings data\n  const endpointsList = []; // Placeholder: derive from findings data or specific API call\n\n  return (\n    <div>\n      <h2 className=\"text-2xl font-semibold mb-4\">Study Details: {studyId}</h2>\n\n      {/* Display error message */}\n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4\" role=\"alert\">\n          <strong className=\"font-bold\">Error: </strong>\n          <span className=\"block sm:inline\">{error}</span>\n        </div>\n      )}\n\n      {/* Loading state for the whole page/prediction */}\n      {isLoading && (!currentPrediction || currentPrediction.study_id !== studyId) && (\n          <div className=\"text-center p-10\">\n              <p>Loading prediction results for {studyId}...</p>\n              {/* Add a spinner or more elaborate loading indicator here */}\n          </div>\n      )}\n\n      {/* Only render components if prediction for the current studyId is loaded */}\n      {currentPrediction && currentPrediction.study_id === studyId && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n          {/* Left Column (Controls & Details) */}\n          <div className=\"lg:col-span-1 space-y-4\">\n            <StudyDetailsPanel studyInfo={studyDetails} isLoading={isLoading} />\n            <EndpointSelectionPanel\n              endpoints={endpointsList} // Pass actual list of endpoints\n              selectedEndpoints={selectedEndpoints}\n              onSelectionChange={setSelectedEndpoints}\n              isLoading={isLoading} // Or more granular loading state\n            />\n          </div>\n\n          {/* Right Column (Visualization & Data Table) */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            <DoseResponseVisualization\n              selectedEndpoints={selectedEndpoints}\n              // data={...} // Pass appropriately filtered/shaped data\n              isLoading={isLoading} // Or more granular loading state\n            />\n            <DataTable\n              // columns={...} // Define columns for findings\n              // data={...} // Pass appropriately filtered/shaped findings data\n              isLoading={isLoading} // Or more granular loading state\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StudyDetailPage; 